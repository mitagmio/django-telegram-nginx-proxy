from ast import Pass, Str
from ctypes import Union
import datetime
from email.policy import default
import time
from turtle import update

from django.utils import timezone
from telegram import Bot, ParseMode, Update
from telegram.ext import CallbackContext

from tgbot.handlers.onboarding import static_text, static_state
from tgbot.handlers.utils.info import extract_user_data_from_update
from tgbot.models import User, Cities, Pairs, Periods, Terms, Order, Suggestion, P2p, MerchantsCities, Invoice, Rating
from tgbot.handlers.onboarding.keyboards import make_keyboard_for_start_command
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from tgbot.tasks import broadcast_message
from dtb.settings import BINANCE_API, BINANCE_SECRET

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def message_handler_func(update: Update, context: CallbackContext):
    state = User.get_user_state(update, context)
    if update.message.chat.id != -1001717597940:
        if state in State_Dict:
            func_menu = State_Dict[state]
            func_menu(update, context)
        elif update.message.text in Menu_Dict:  # button_message –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–µ
            func_menu = Menu_Dict[update.message.text]
            func_menu(update, context)
        else:
            del_mes(update, context)


def callback_inline(update: Update, context: CallbackContext):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    # print('callback_inline', update)
    call_list = ['–ì–æ—Ä–æ–¥',
                 ]
    call = update.callback_query
    if call.message:
        call_func = call.data.split(' ')
        if len(call_func) > 1:
            if call_func[0] in call_list:
                func_menu = Menu_Dict[call_func[0]]
                func_menu(update, context, call_func[1])
        else:
            func_menu = Menu_Dict[call.data]
            func_menu(update, context)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    # elif call.inline_message_id:
    #	func_menu = Menu_Dict[call.data]
    #	func_menu(call, context)

# –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π


# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è—é—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–¥–µ–ª–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏) –∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ States.S_MENU(–≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å=1)
def del_mes(update: Update, context: CallbackContext, bot_msg: bool = False):
    message = get_message_bot(update)
    try:
        context.bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    if bot_msg:
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-1)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-2)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-3)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-4)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-5)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-6)
        except:
            pass

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º message


def get_message_bot(update):
    if hasattr(update, 'message') and update.message != None:
        message = update.message
    if hasattr(update, 'callback_query') and update.callback_query != None:
        message = update.callback_query.message
    return message

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ float


def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username


def check_username(update: Update, context: CallbackContext, text='\n'):
    message = get_message_bot(update)
    if not hasattr(message.chat, 'username') or message.chat.username == '' or message.chat.username == None:
        btn_menu = InlineKeyboardButton(text='üéâ –°—Ç–∞—Ä—Ç', callback_data='–°—Ç–∞—Ä—Ç')
        markup = InlineKeyboardMarkup([
            [btn_menu]
        ])
        id = context.bot.send_message(message.chat.id, static_text.NOT_USER_NAME.format(
            text=text, tgid=message.chat.id), reply_markup=markup)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        User.set_message_id(update, context, id.message_id)
        return False
    return True


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞


def command_start(update: Update, context: CallbackContext):
    u, _ = User.get_user_and_created(update, context)
    message = get_message_bot(update)
    # if u.state == static_state.S_ACCEPTED_ORDER:
    #     cmd_accepted_order_show(update, context)
    #     return
    # if u.state == static_state.S_ACCEPTED_EXCHANGE:
    #     cmd_accepted_exchange_show(update, context)
    #     return
    text = "\n"
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
    if check_username(update, context, text):
        btn_menu = InlineKeyboardButton(text='üìã –ú–µ–Ω—é', callback_data='–ú–µ–Ω—é')
        markup = InlineKeyboardMarkup([
            [btn_menu]
        ])
        # print(bot.get_chat_member(352482305))
        id = context.bot.send_message(message.chat.id, static_text.START_USER.format(
            username=u.username,text=text, tgid=message.chat.id), reply_markup=markup, parse_mode="HTML")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        User.set_message_id(update, context, id.message_id)
    del_mes(update, context, True)

    # if created:
    #     text = static_text.start_created.format(first_name=u.first_name)
    # else:
    #     text = static_text.start_not_created.format(first_name=u.first_name)

    # update.message.reply_text(text=text, reply_markup=make_keyboard_for_start_command())


# –ú–µ–Ω—é


def cmd_menu(update: Update, context: CallbackContext):
    if check_username(update, context):
        message = get_message_bot(update)
        # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        User.set_user_state(update, context, static_state.S_MENU)
        buttons = []
        btn_help = InlineKeyboardButton(text='üÜò –ü–æ–º–æ—â—å', callback_data='Help')
        btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–°—Ç–∞—Ä—Ç')
        btn_vc = InlineKeyboardButton(
            text='üë®‚Äçüëß‚Äçüë¶üßç‚Äç‚ôÇÔ∏è Kostevich VC', callback_data='Help')
        btn_selected = InlineKeyboardButton(
            text='üèµüí∏ Kostevich Selected', callback_data='Help')
        btn_academy = InlineKeyboardButton(
            text='üßÆüìù Kostevich Academy', callback_data='Help')
        buttons.append(btn_vc)
        buttons.append(btn_selected)
        buttons.append(btn_academy)
        u = User.get_user(update, context)
        if u.is_admin:
            btn_admin = InlineKeyboardButton(
                text='üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
            buttons.append([btn_admin])
        buttons.append([btn_help])
        buttons.append([btn_back])
        markup = InlineKeyboardMarkup(buttons)
        id = context.bot.send_message(
            message.chat.id, static_text.MENU, reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
    del_mes(update, context, True)

# –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞ ## user_story


def start_client(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    if check_username(update, context):
        if u.orders_client == 'None':
            cmd_client(update, context)
            return
        message = get_message_bot(update)
        # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        User.set_user_state(update, context, static_state.S_MENU)
        buttons = []
        btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
        btn_client = InlineKeyboardButton(
            text='üí∏ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='–ö–ª–∏–µ–Ω—Ç')
        btn_shop = InlineKeyboardButton(
            text='üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='–ó–∞–∫–∞–∑—ã_–ö–ª–∏–µ–Ω—Ç')
        buttons.append([btn_client, btn_shop])
        buttons.append([btn_back])
        markup = InlineKeyboardMarkup(buttons)
        id = context.bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:", reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
    del_mes(update, context, True)

# –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ "–ö–ª–∏–µ–Ω—Ç" - –ì–æ—Ä–æ–¥


def cmd_client(update: Update, context: CallbackContext):
    message = get_message_bot(update)
    User.set_orders_client(update, context, "yes")
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    User.set_user_state(update, context, static_state.S_MENU)
    buttons = []
    btn_back = InlineKeyboardButton(
        text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
    cities = Cities.get_obj()
    if len(cities) >= 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞
        count = 0
        # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –ø–∏—à–µ–º –ø–æ 2 –≤ —Ä—è–¥.
        for element in cities:
            count += 1
            merchants_id = list(MerchantsCities.objects.filter(
                city_id=element['id']).values_list('merchant_id', flat=True))
            merchants = len(list(User.objects.filter(
                user_id__in=merchants_id, merchant_status='online')))
            # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —á–µ—Ç–Ω—ã–π –ø–æ–º–µ—â–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            if len(cities) == count and len(cities) % 2 != 0:
                city = InlineKeyboardButton(
                    element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name'])
                buttons.append([city])
                break
            if count % 2 != 0:
                city_a = InlineKeyboardButton(
                    element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name'])
            else:
                city_b = InlineKeyboardButton(
                    element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name'])
                buttons.append([city_a, city_b])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, "<b>–†—è–¥–æ–º —Å –≥–æ—Ä–æ–¥–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –æ–Ω–ª–∞–π–Ω, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—Ç –í–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–º–æ–≥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à—É—é —Å–¥–µ–ª–∫—É.\n\n–í–´–ë–ï–†–ò –ì–û–†–û–î, –í –ö–û–¢–û–†–û–ú –•–û–ß–ï–®–¨ –ü–†–û–ò–ó–í–ï–°–¢–ò –û–ë–ú–ï–ù:</b>", reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)
    del_mes(update, context, True)

# –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –∏ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã –æ–±–º–µ–Ω–∞
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–æ—Ä–æ–¥
# –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞, —Ç–∏–ø –ø–∞—Ä—ã


def cmd_type_pair(update: Update, context: CallbackContext, city: Str = 'None'):
    message = get_message_bot(update)
    if city == 'None':
        cmd_client(update, context)
        return
    del_mes(update, context, True)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
    User.set_city(update, context, city)
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    User.set_user_state(update, context, static_state.S_MENU)
    buttons = []
    btn_back = InlineKeyboardButton(
        text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
    pair_a = InlineKeyboardButton(
        'üá∫üá∏ USD (–Ω–∞–ª–∏—á–∫–∞)', callback_data='–¢–ò–ü_–ü–∞—Ä—ã '+'USD')
    pair_b = InlineKeyboardButton(
        'üá±üá∞ LKR (–Ω–∞–ª–∏—á–∫–∞)', callback_data='–¢–ò–ü_–ü–∞—Ä—ã '+'LKR')
    buttons.append([pair_a, pair_b])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n\n<b>–í–´–ë–ï–†–ò –í–ê–õ–Æ–¢–£ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø:</b>\n\n".format(city), reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–∞—Ä—ã
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∏–ø –ø–∞—Ä—ã
# –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞



###################################
###################################
def cmd_help(update: Update, context: CallbackContext):
    del_mes(update, context, True)
    message = get_message_bot(update)
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
    btn_main = InlineKeyboardButton(text='‚èÆ –í –Ω–∞—á–∞–ª–æ', callback_data='–°—Ç–∞—Ä—Ç')
    buttons.append([btn_main, btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id,
        """<b>–ü–û–ú–û–©–¨</b>
        
        """,
        reply_markup=markup, parse_mode="HTML", disable_web_page_preview=True)
    User.set_message_id(update, context, id.message_id)


def cmd_admin(update: Update, context: CallbackContext):
    del_mes(update, context, True)
    u = User.get_user(update, context)
    if u.is_admin:
        message = get_message_bot(update)
        buttons = []
        btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
        btn_main = InlineKeyboardButton(
            text='‚èÆ –í –Ω–∞—á–∞–ª–æ', callback_data='–°—Ç–∞—Ä—Ç')
        buttons.append([btn_main, btn_back])
        markup = InlineKeyboardMarkup(buttons)
        id = context.bot.send_message(message.chat.id, "üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:\n–≤—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n<code>{}</code>".format(
            P2p.pay_trade_history()), reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
    else:
        command_start(update, context)


def cmd_pass():
    pass


# —Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –ú–µ–Ω—é –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
State_Dict = {
    # –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–æ –ú–µ–Ω—é, –º—ã –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —É–¥–∞–ª—è–µ—Ç—Å—è
    static_state.S_MENU: del_mes,
}

# —Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –ú–µ–Ω—é
Menu_Dict = {
    '–°—Ç–∞—Ä—Ç': command_start,
    '–ú–µ–Ω—é': cmd_menu,
    '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ': cmd_admin,
    '–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç': start_client,
    '–ö–ª–∏–µ–Ω—Ç': cmd_client,
    '–ì–æ—Ä–æ–¥': cmd_type_pair,
    'pass': cmd_pass,
    'Help': cmd_help,
}


def secret_level(update: Update, context: CallbackContext) -> None:
    # callback_data: SECRET_LEVEL_BUTTON variable from manage_data.py
    """ Pressed 'secret_level_button_text' after /start command"""
    user_id = extract_user_data_from_update(update)['user_id']
    text = static_text.unlock_secret_room.format(
        user_count=User.objects.count(),
        active_24=User.objects.filter(
            updated_at__gte=timezone.now() - datetime.timedelta(hours=24)).count()
    )

    context.bot.edit_message_text(
        text=text,
        chat_id=user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )
