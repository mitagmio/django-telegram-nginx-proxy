from ast import Pass, Str
from ctypes import Union
import datetime
from email.policy import default
import time
from turtle import update

from django.utils import timezone
from telegram import Bot, ParseMode, Update
from telegram.ext import CallbackContext

from tgbot.handlers.onboarding import static_text, static_state
from tgbot.handlers.utils.info import extract_user_data_from_update
from tgbot.models import User, Cities, Pairs, Periods, Terms, Order, Suggestion, P2p, MerchantsCities, Invoice, Rating
from tgbot.handlers.onboarding.keyboards import make_keyboard_for_start_command
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from tgbot.tasks import broadcast_message
from dtb.settings import BINANCE_API, BINANCE_SECRET

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞


def command_start(update: Update, context: CallbackContext):
    u, _ = User.get_user_and_created(update, context)
    state = u.state
    message = get_message_bot(update)
    if state == static_state.S_ACCEPTED_ORDER:
        cmd_accepted_order_show(update, context)
        return
    if state == static_state.S_ACCEPTED_EXCHANGE:
        cmd_accepted_exchange_show(update, context)
        return
    text = "\n"
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
    if check_username(update, context, text):
        btn_menu = InlineKeyboardButton(text='üìã –ú–µ–Ω—é', callback_data='–ú–µ–Ω—é')
        markup = InlineKeyboardMarkup([
            [btn_menu]
        ])
        # print(bot.get_chat_member(352482305))
        id = context.bot.send_message(message.chat.id, static_text.START_USER.format(
            text, message.chat.id), reply_markup=markup, parse_mode="HTML")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        User.set_message_id(update, context, id.message_id)
    time.sleep(1)
    del_mes(update, context, True)

    # if created:
    #     text = static_text.start_created.format(first_name=u.first_name)
    # else:
    #     text = static_text.start_not_created.format(first_name=u.first_name)

    # update.message.reply_text(text=text, reply_markup=make_keyboard_for_start_command())

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def message_handler_func(update: Update, context: CallbackContext):
    state = User.get_user_state(update, context)
    if update.message.chat.id != -1001717597940:
        if state in State_Dict:
            func_menu = State_Dict[state]
            func_menu(update, context)
        elif update.message.text in Menu_Dict:  # button_message –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–µ
            func_menu = Menu_Dict[update.message.text]
            func_menu(update, context)
        else:
            del_mes(update, context)


def callback_inline(update: Update, context: CallbackContext):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    # print('callback_inline', update)
    call_list = ['–ì–æ—Ä–æ–¥', '–ü–∞—Ä–∞', '–ü–µ—Ä–∏–æ–¥', '–î–æ—Å—Ç–∞–≤–∫–∞', '–¢–ò–ü_–ü–∞—Ä—ã', '–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞',
                 '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å', '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å_–∫—É—Ä—Å', '–í—ã–±–∏—Ä–∞—é_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–ö–ª–∏–µ–Ω—Ç_–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª_—Å–¥–µ–ª–∫—É', '–ö–ª–∏–µ–Ω—Ç_–æ—Ç–º–µ–Ω–∏–ª_—Å–¥–µ–ª–∫—É',
                 '–ó–±–∞—Ä–∞—Ç—å_–∑–∞—è–≤–∫—É', '–û—Ç–≤–µ—Ç_–Ω–∞_–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä', '–û—Ç–≤–µ—Ç_–Ω–∞_–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä', '–û—Ç–º–µ–Ω–∏—Ç—å_–∑–∞—è–≤–∫—É',
                 ]
    call = update.callback_query
    if call.message:
        call_func = call.data.split(' ')
        if len(call_func) > 1:
            if call_func[0] in call_list:
                func_menu = Menu_Dict[call_func[0]]
                func_menu(update, context, call_func[1])
        else:
            func_menu = Menu_Dict[call.data]
            func_menu(update, context)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    # elif call.inline_message_id:
    #	func_menu = Menu_Dict[call.data]
    #	func_menu(call, context)

# –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π


# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è—é—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–¥–µ–ª–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏) –∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ States.S_MENU(–≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å=1)
def del_mes(update: Update, context: CallbackContext, bot_msg: bool = False):
    message = get_message_bot(update)
    try:
        context.bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    if bot_msg:
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-1)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-2)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-3)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-4)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-5)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-6)
        except:
            pass

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º message


def get_message_bot(update):
    if hasattr(update, 'message') and update.message != None:
        message = update.message
    if hasattr(update, 'callback_query') and update.callback_query != None:
        message = update.callback_query.message
    return message

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ float


def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username


def check_username(update: Update, context: CallbackContext, text='\n'):
    message = get_message_bot(update)
    if not hasattr(message.chat, 'username') or message.chat.username == '' or message.chat.username == None:
        btn_menu = InlineKeyboardButton(text='üéâ –°—Ç–∞—Ä—Ç', callback_data='–°—Ç–∞—Ä—Ç')
        markup = InlineKeyboardMarkup([
            [btn_menu]
        ])
        id = context.bot.send_message(message.chat.id, static_text.NOT_USER_NAME.format(
            text, message.chat.id), reply_markup=markup)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        User.set_message_id(update, context, id.message_id)
        return False
    return True

# –ú–µ–Ω—é


def cmd_menu(update: Update, context: CallbackContext):
    if check_username(update, context):
        message = get_message_bot(update)
        # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        User.set_user_state(update, context, static_state.S_MENU)
        buttons = []
        btn_help = InlineKeyboardButton(text='üÜò –ü–æ–º–æ—â—å', callback_data='Help')
        btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–°—Ç–∞—Ä—Ç')
        btn_client = InlineKeyboardButton(
            text='üßç‚Äç‚ôÇÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ª–∏—á–∫—É', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
        btn_shop = InlineKeyboardButton(
            text='üí∏ –Ø –û–±–º–µ–Ω–Ω–∏–∫', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
        buttons.append([btn_client, btn_shop])
        u = User.get_user(update, context)
        if u.is_admin:
            btn_admin = InlineKeyboardButton(
                text='üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
            buttons.append([btn_admin])
        buttons.append([btn_help])
        buttons.append([btn_back])
        markup = InlineKeyboardMarkup(buttons)
        id = context.bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏:", reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
    time.sleep(1)
    del_mes(update, context, True)

# –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞ ## user_story


def start_client(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    if check_username(update, context):
        if u.orders_client == 'None':
            cmd_client(update, context)
            return
        message = get_message_bot(update)
        # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        User.set_user_state(update, context, static_state.S_MENU)
        buttons = []
        btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
        btn_client = InlineKeyboardButton(
            text='üí∏ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='–ö–ª–∏–µ–Ω—Ç')
        btn_shop = InlineKeyboardButton(
            text='üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='–ó–∞–∫–∞–∑—ã_–ö–ª–∏–µ–Ω—Ç')
        buttons.append([btn_client, btn_shop])
        buttons.append([btn_back])
        markup = InlineKeyboardMarkup(buttons)
        id = context.bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:", reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
    del_mes(update, context, True)

# –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ "–ö–ª–∏–µ–Ω—Ç" - –ì–æ—Ä–æ–¥


def cmd_client(update: Update, context: CallbackContext):
    message = get_message_bot(update)
    User.set_orders_client(update, context, "yes")
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    User.set_user_state(update, context, static_state.S_MENU)
    buttons = []
    btn_back = InlineKeyboardButton(
        text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
    cities = Cities.get_obj()
    if len(cities) >= 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞
        count = 0
        # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –ø–∏—à–µ–º –ø–æ 2 –≤ —Ä—è–¥.
        for element in cities:
            count += 1
            merchants_id = list(MerchantsCities.objects.filter(
                city_id=element['id']).values_list('merchant_id', flat=True))
            merchants = len(list(User.objects.filter(
                user_id__in=merchants_id, merchant_status='online')))
            # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —á–µ—Ç–Ω—ã–π –ø–æ–º–µ—â–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            if len(cities) == count and len(cities) % 2 != 0:
                city = InlineKeyboardButton(
                    element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name'])
                buttons.append([city])
                break
            if count % 2 != 0:
                city_a = InlineKeyboardButton(
                    element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name'])
            else:
                city_b = InlineKeyboardButton(
                    element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name'])
                buttons.append([city_a, city_b])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, "<b>–†—è–¥–æ–º —Å –≥–æ—Ä–æ–¥–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –æ–Ω–ª–∞–π–Ω, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—Ç –í–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–º–æ–≥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à—É—é —Å–¥–µ–ª–∫—É.\n\n–í–´–ë–ï–†–ò –ì–û–†–û–î, –í –ö–û–¢–û–†–û–ú –•–û–ß–ï–®–¨ –ü–†–û–ò–ó–í–ï–°–¢–ò –û–ë–ú–ï–ù:</b>", reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)
    del_mes(update, context, True)

# –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –∏ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã –æ–±–º–µ–Ω–∞
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–æ—Ä–æ–¥
# –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞, —Ç–∏–ø –ø–∞—Ä—ã


def cmd_type_pair(update: Update, context: CallbackContext, city: Str = 'None'):
    message = get_message_bot(update)
    if city == 'None':
        cmd_client(update, context)
        return
    del_mes(update, context, True)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
    User.set_city(update, context, city)
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    User.set_user_state(update, context, static_state.S_MENU)
    buttons = []
    btn_back = InlineKeyboardButton(
        text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
    pair_a = InlineKeyboardButton(
        'üá∫üá∏ USD (–Ω–∞–ª–∏—á–∫–∞)', callback_data='–¢–ò–ü_–ü–∞—Ä—ã '+'USD')
    pair_b = InlineKeyboardButton(
        'üá±üá∞ LKR (–Ω–∞–ª–∏—á–∫–∞)', callback_data='–¢–ò–ü_–ü–∞—Ä—ã '+'LKR')
    buttons.append([pair_a, pair_b])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n\n<b>–í–´–ë–ï–†–ò –í–ê–õ–Æ–¢–£ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø:</b>\n\n".format(city), reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–∞—Ä—ã
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∏–ø –ø–∞—Ä—ã
# –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞


def user_type_pair(update: Update, context: CallbackContext, type_pair: Str = 'None'):
    u, _ = User.get_user_and_created(update, context)
    message = get_message_bot(update)
    if type_pair == 'None':
        cmd_type_pair(update, context, u.city)
        return
    del_mes(update, context, True)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
    User.set_type_pair(update, context, type_pair)
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    User.set_user_state(update, context, static_state.S_MENU)
    buttons = []
    btn_back = InlineKeyboardButton(
        text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
    pairs = Pairs.get_obj()
    if len(pairs) >= 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞
        # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –ø–∏—à–µ–º –ø–æ 2 –≤ —Ä—è–¥.
        for element in pairs:
            if element['pair'].split('/')[1] == type_pair:
                pair = InlineKeyboardButton(
                    element['ru_pair'], callback_data='–ü–∞—Ä–∞ '+element['pair'])
                buttons.append([pair])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n\n<b>–í–´–ë–ï–†–ò –ü–ê–†–£ –î–õ–Ø –û–ë–ú–ï–ù–ê:</b>\n\n".format(u.city), reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –í–ø–∏—Å—ã–≤–∞–µ–º –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É:


def user_type_pair_custome(update: Update, context: CallbackContext):
    u, _ = User.get_user_and_created(update, context)
    message = get_message_bot(update)
    pair = message.text+'/'+u.pair.split('/')[1]
    if pair == 'None':
        cmd_type_pair(update, context, u.city)
        return
    del_mes(update, context, True)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
    User.set_type_pair(update, context, pair)
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    User.set_user_state(update, context, static_state.S_MENU)
    cmd_pair(update, context, pair)


# –í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –†—É–ø–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–µ.
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–∞—Ä–∞


def cmd_pair(update: Update, context: CallbackContext, pair: Str = 'None'):
    message = get_message_bot(update)
    if pair == 'None':
        return user_type_pair(update, context, u.type_pair)
    del_mes(update, context, True)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä—É –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
    User.set_pair(update, context, pair)
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    User.set_user_state(update, context, static_state.S_ENTERED_PAIR)
    u, _ = User.get_user_and_created(update, context)
    city = u.city
    buttons = []
    btn_back = InlineKeyboardButton(
        text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    if pair == 'ANY/LKR' or pair == 'ANY/USD':
        if u.pair in Pairs.get_dict():
            pair = Pairs.get_dict()[u.pair]
        User.set_user_state(update, context, static_state.S_TYPE_PAIR_CUSTOME)
        id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n\n<b>–í–í–ï–î–ò–¢–ï –ù–ê–ó–í–ê–ù–ò–ï –í–ê–õ–Æ–¢–´:</b>\n\n–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ –¥–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–±–º–µ–Ω–Ω–∏–∫".format(
            city, pair), reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
    else:
        if u.pair in Pairs.get_dict():
            pair = Pairs.get_dict()[u.pair]
        id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n\n<b>–í–í–ï–î–ò–¢–ï –°–£–ú–ú–£ –¶–ò–§–†–û–ô –î–õ–Ø –û–ë–ú–ï–ù–ê:</b>\n\n".format(
            city, pair), reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)

# –£—Ç–æ—á–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
# –≤ —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–ø–∞–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def cmd_periods(update: Update, context: CallbackContext, summ: float = 0.0):
    u, _ = User.get_user_and_created(update, context)
    message = get_message_bot(update)
    if summ == 0.0:
        summ = message.text
    if isfloat(summ):
        del_mes(update, context, True)
        User.set_user_state(update, context, static_state.S_MENU)
        User.set_summ(update, context, float(summ))
        summ_m = int(float(summ))
        city = u.city
        if u.pair in Pairs.get_dict():
            pair = Pairs.get_dict()[u.pair]
        else:
            pair = u.pair.split('/')[0]+' =>  '+u.pair.split('/')[1]
        buttons = []
        btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ö–ª–∏–µ–Ω—Ç')
        periods = Periods.get_obj()
        for element in periods:
            period = InlineKeyboardButton(
                '‚è≥ '+element['ru_period'], callback_data='–ü–µ—Ä–∏–æ–¥ '+element['period'])
            buttons.append([period])
        buttons.append([btn_back])
        markup = InlineKeyboardMarkup(buttons)
        id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ <code>{}</code> {}\n\n<b>–ö–ê–ö –ë–´–°–¢–†–û –í–ê–ú –ù–£–ñ–ï–ù –ö–≠–®?</b> ‚è≥".format(
            city, pair, summ_m, pair.split(' =>  ')[0]), reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
    else:
        pair = u.pair
        cmd_pair(update, context, pair)

# –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ –∏ –≤—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω.


def cmd_transfer(update: Update, context: CallbackContext, period: str = 'None'):
    u, _ = User.get_user_and_created(update, context)
    message = get_message_bot(update)
    if period == 'None':
        return cmd_periods(update, context, u.summ)
    del_mes(update, context, True)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
    User.set_period(update, context, period)
    User.set_user_state(update, context, static_state.S_MENU)
    period = Periods.get_dict()[period]
    city = u.city
    if u.pair in Pairs.get_dict():
        pair = Pairs.get_dict()[u.pair]
    else:
        pair = u.pair.split('/')[0]+' =>  '+u.pair.split('/')[1]
    summ_m = int(u.summ)
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ö–ª–∏–µ–Ω—Ç')
    btn_pickup = InlineKeyboardButton(
        text='–Ø –ø–æ–¥—ä–µ–¥—É –∫ –æ–±–º–µ–Ω–Ω–∏–∫—É –≤ –≥. '+str(city), callback_data='–î–æ—Å—Ç–∞–≤–∫–∞ pickup')
    btn_delivery = InlineKeyboardButton(
        text='–ú–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º–æ–µ–º—É –∞–¥—Ä–µ—Å—É', callback_data='–î–æ—Å—Ç–∞–≤–∫–∞ delivery')
    btn_both = InlineKeyboardButton(
        text='–†–∞—Å—Å–º–æ—Ç—Ä—é –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞', callback_data='–î–æ—Å—Ç–∞–≤–∫–∞ both')
    buttons.append([btn_pickup])
    buttons.append([btn_delivery])
    buttons.append([btn_both])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ <code>{}</code> {}\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n\n<b>–û–°–¢–ê–í–¨–¢–ï –ü–û–ñ–ï–õ–ê–ù–ò–ï –û –î–û–°–¢–ê–í–ö–ï</b>".format(
        city, pair, summ_m, pair.split(' =>  ')[0], period), reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫


def cmd_accept_order(update: Update, context: CallbackContext, transfer: str = 'None'):
    u, _ = User.get_user_and_created(update, context)
    message = get_message_bot(update)
    if transfer == 'None':
        return cmd_transfer(update, context, u.period)
    if transfer == 'pickup':
        u.transfer = '–ü–æ–¥—ä–µ–¥—É –∫ –æ–±–º–µ–Ω–Ω–∏–∫—É'
    if transfer == 'delivery':
        u.transfer = '–ù—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É'
    if transfer == 'both':
        u.transfer = '–†–∞—Å—Å–º–æ—Ç—Ä—é –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞'
    del_mes(update, context, True)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
    User.set_user_state(update, context, static_state.S_MENU)
    period = Periods.get_dict()[u.period]
    city = u.city
    if u.pair in Pairs.get_dict():
        pair = Pairs.get_dict()[u.pair]
    else:
        pair = u.pair.split('/')[0]+' =>  '+u.pair.split('/')[1]
    summ_m = int(u.summ)
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ö–ª–∏–µ–Ω—Ç')
    btn_yes = InlineKeyboardButton(
        text='‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ', callback_data='–ó–∞—è–≤–∫–∞_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
    btn_no = InlineKeyboardButton(
        text='‚ùå –ù–µ—Ç', callback_data='–ó–∞—è–≤–∫–∞_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
    buttons.append([btn_yes, btn_no])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ <code>{}</code> {}\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code>\n\n<b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –ó–ê–Ø–í–ö–£ –ù–ê –û–ë–ú–ï–ù, –í–°–ï –í–ï–†–ù–û?</b>".format(
        city, pair, summ_m, pair.split(' =>  ')[0], period, u.transfer), reply_markup=markup, parse_mode="HTML")
    u.message_id = id.message_id
    u.save()


def cmd_accepted_order_show(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    city = u.city
    if u.pair in Pairs.get_dict():
        pair = Pairs.get_dict()[u.pair]
    else:
        pair = u.pair
    summ = int(u.summ)
    period = Periods.get_dict()[u.period]
    id = context.bot.send_message(message.chat.id, "<b>–í–ê–® –ó–ê–ö–ê–ó\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code>\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–∏–Ω —á–∞—Å, –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–±–º–µ–Ω–Ω–∏–∫–∏ —Å–¥–µ–ª–∞—é—Ç —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É.</b>".format(
        city, pair, pair.split('/')[0], summ, period, u.transfer), parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ –æ–±–º–µ–Ω


def cmd_accepted_order(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    city = u.city
    if u.pair in Pairs.get_dict():
        pair = Pairs.get_dict()[u.pair]
    else:
        pair = u.pair.split('/')[0]+' =>  '+u.pair.split('/')[1]
    summ = int(u.summ)
    period = Periods.get_dict()[u.period]
    timestamp = int(datetime.datetime.today().timestamp())
    dt = datetime.datetime.fromtimestamp(timestamp + (60*60*5.5))
    minutes_admining = 3
    if int(dt.hour) >= 9 and int(dt.hour) <= 19:
        timestamp_execut = timestamp + (60*minutes_admining)
        text = '–í —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç –º—ã —Å–æ–±–µ—Ä–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –æ–∂–∏–¥–∞–π—Ç–µ.'
    if int(dt.hour) < 9:
        mod_h = 9 - int(dt.hour)
        timestamp_execut = timestamp + (60*60*mod_h) + (60*minutes_admining)
        text = '–î–û–ë–†–´–ô –í–ï–ß–ï–†, –ú–´ –†–ê–ë–û–¢–ê–ï–ú –° 9:00 –£–¢–†–ê –î–û 20:00 –í–ï–ß–ï–†–ê.\n\n–í–ê–® –ó–ê–ö–ê–ó –ë–£–î–ï–¢ –û–ë–†–ê–ë–û–¢–ê–ù –í 9:00 –£–¢–†–ê –ò –£–ñ–ï –í 9:30 –í–´ –ü–û–õ–£–ß–ò–¢–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –û–¢ –û–ë–ú–ï–ù–ù–ò–ö–û–í, –ü–û–ñ–ê–õ–£–ô–°–¢–ê –û–ñ–ò–î–ê–ô–¢–ï...'
    if int(dt.hour) > 19:
        mod_h = 24 - int(dt.hour) + 9
        timestamp_execut = timestamp + (60*60*mod_h) + (60*minutes_admining)
        text = '–î–û–ë–†–´–ô –í–ï–ß–ï–†, –ú–´ –†–ê–ë–û–¢–ê–ï–ú –° 9:00 –£–¢–†–ê –î–û 20:00 –í–ï–ß–ï–†–ê.\n\n–í–ê–® –ó–ê–ö–ê–ó –ë–£–î–ï–¢ –û–ë–†–ê–ë–û–¢–ê–ù –í 9:00 –£–¢–†–ê –ò –£–ñ–ï –í 9:30 –í–´ –ü–û–õ–£–ß–ò–¢–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –û–¢ –û–ë–ú–ï–ù–ù–ò–ö–û–í, –ü–û–ñ–ê–õ–£–ô–°–¢–ê –û–ñ–ò–î–ê–ô–¢–ï...'
    date_time_execut = datetime.datetime.fromtimestamp(
        timestamp_execut + (60*60*5.5))
    p2p_last = P2p.objects.latest('timestamp').__dict__
    p2p_last['usdt'] = 1
    pair_dict = Pairs.get_convert_dict()
    if u.pair in pair_dict:
        exchange_rate = p2p_last[pair_dict[u.pair]]
        eq_usdt = round((float(summ) / float(exchange_rate)), 2)
    else:
        exchange_rate = p2p_last['usdt']
        eq_usdt = 0
    order_fee = round((float(summ) / float(exchange_rate))
                      * float(Terms.get_dict()['size_fee']), 2)
    o, created = Order.objects.update_or_create(timestamp_execut=timestamp_execut, client_id=u, defaults={
        'city': u.city,
        'pair': u.pair,
        'summ': u.summ,
        'period': u.period,
        'transfer': u.transfer,
        'date_time_execut': date_time_execut,
        'order_fee': order_fee,
        'status': 'admining'
    })
    if created:
        # admining orders if summ more then 'filter_order_size_adminig'
        # —Å—á–∏—Ç–∞–µ–º –≤ USDT c—É–º–º—É.

        if eq_usdt >= float(Terms.get_dict()['filter_order_size_adminig']):
            s = Cities.objects.get(ru_name=u.city)
            user_ids = list(s.city_merchant_ids_set.all().values_list(
                'merchant_id', flat=True))  # –°–ø–∏—Å–æ–∫ –º–µ—Ä—á–∞–Ω—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –≥–æ—Ä–æ–¥–µ
            ids_admins = list(User.objects.filter(user_id__in=user_ids, merchant_status='online', is_admin=True).values_list(
                'user_id', flat=True))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ—Ä—á–∞–Ω—Ç–æ–≤ = 'online'

            percent = 0
            if u.count_client_order > 0:
                percent = round(u.count_client_order_success /
                                u.count_client_order * 100, 2)
            username = str(u)
            un_ = username.split('@')[1]
            username_secure = '@' + un_[0] + \
                un_[1] + '******' + un_[-2] + un_[-1]

            if len(ids_admins) > 0:
                bts = [
                    [{'text': '‚ÄºÔ∏èüíµ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–±—Ä–∞—Ç—å –∑–∞—è–≤–∫—É —Å–µ–±–µ',
                        'callback_data': '–ó–±–∞—Ä–∞—Ç—å_–∑–∞—è–≤–∫—É ' + str(o.id)}],
                    [{'text': 'ü™Å –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'callback_data': '–£–¥–∞–ª–∏—Ç—å'}]
                ]
                # send in async mode via celery
                broadcast_message.delay(
                    user_ids=ids_admins,
                    text="<b>–ù–û–í–´–ô –û–†–î–ï–†\n{}\n–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ \\ –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <code>{} \\ {}   {}%</code>\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code>\n\n –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <code>{}</code> USDT</b>".format(
                        username_secure, u.count_client_order_success, u.count_client_order, percent, city, pair, pair.split('/')[0], summ, period, u.transfer, order_fee),
                    entities=update.callback_query.message.to_dict().get('entities'),
                    reply_markup=bts
                )
        User.set_user_state(update, context, static_state.S_ACCEPTED_ORDER)
        id = context.bot.send_message(message.chat.id, "<b>–ê–ö–¢–ò–í–ù–´–ô –û–†–î–ï–†\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞:\n<code>{}</code>\n–°—É–º–º–∞: <code>{}</code> {} \n–ö—ç—à –Ω—É–∂–µ–Ω: <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{}</code>\n\n{}</b>".format(
            city, pair, summ, pair.split(' =>  ')[0], period, u.transfer, text), parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
        return
    cmd_transfer(update, context, u.period)


def user_canceled_order(update: Update, context: CallbackContext, orderid: str):
    o = Order.objects.get(id=orderid)
    o.status = 'canceled'
    o.save()
    cmd_canceled_order(update, context)

# –∫–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ –æ–±–º–µ–Ω


def cmd_canceled_order(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    u.city = 'None'
    u.type_pair = 'None'
    u.pair = 'None'
    u.summ = 0.0
    u.period = 'None'
    u.transfer = 'None'
    u.save()
    start_client(update, context)
    # u = User.get_user(update, context)
    # u.city = 'None'
    # u.type_pair = 'None'
    # u.pair = 'None'
    # u.summ = 0.0
    # u.period = 'None'
    # u.transfer = 'None'
    # u.save()

# –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞


def client_orders(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    User.set_user_state(update, context, static_state.S_MENU)
    for i in u.client_id_order_set.filter(status__in=['exchanged_succesfull', 'exchange']).order_by('timestamp_execut').reverse()[:5]:
        try:
            s = Suggestion.objects.get(
                order_id=i.id, merchant_executor_id=i.merchant_executor_id.user_id)
            summ_suggestion = s.summ
        except:
            summ_suggestion = '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
        m = i.merchant_executor_id
        if i.pair in Pairs.get_dict():
            pair = Pairs.get_dict()[i.pair]
        else:
            pair = i.pair.split('/')[0]+' =>  '+i.pair.split('/')[1]
        period = Periods.get_dict()[i.period]
        time.sleep(0.2)
        ts = int(i.timestamp_execut) + (60*60*5.5)
        dt = datetime.datetime.fromtimestamp(
            ts).strftime('%Y-%m-%d %H:%M')
        context.bot.send_message(message.chat.id, "<b>{}</b>\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n\–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code>\n\n–û–±–º–µ–Ω–Ω–∏–∫ {} –ø—Ä–µ–¥–ª–æ–∂–∏–ª:\n–°—É–º–º–∞ <code>{}</code> {}\n{}".format(
            dt, i.city, pair, pair.split(' =>  ')[0], int(i.summ), period, i.transfer, i.merchant_executor_id, summ_suggestion, pair.split(' =>  ')[1], m.merchant_delivery), parse_mode="HTML")
    buttons = []
    btn_back = InlineKeyboardButton(
        text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è


def cmd_accepted_merchant_executer(update: Update, context: CallbackContext, orderid_merchantid: str):
    orderid_merchantid = orderid_merchantid.split('_')
    orderid = orderid_merchantid[0]
    merchantid = orderid_merchantid[1]
    m = User.objects.get(user_id=merchantid)
    message = get_message_bot(update)
    u = User.get_user(update, context)
    try:
        context.bot.delete_message(
            chat_id=message.chat.id, message_id=u.message_id)
    except:
        pass
    del_mes(update, context, True)
    User.set_user_state(update, context, static_state.S_ACCEPTED_EXCHANGE)
    o = Order.objects.get(id=orderid)
    o.merchant_executor_id = m
    o.status = 'exchange'
    o.save()
    m = User.objects.get(user_id=merchantid)
    if o.pair in Pairs.get_dict():
        pair = Pairs.get_dict()[o.pair]
    else:
        pair = o.pair.split('/')[0]+' =>  '+o.pair.split('/')[1]
    period = Periods.get_dict()[o.period]
    s = Suggestion.objects.get(
        order_id=orderid, merchant_executor_id=merchantid)
    text = "<b>–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code></b>".format(
        o.city, pair, pair.split(' =>  ')[0], int(o.summ), period, o.transfer)
    text_fee = "\n\n–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <i><b>{} USDT</b></i>".format(
        o.order_fee)
    pay_summ = "{} {}".format(int(s.summ), pair.split(' =>  ')[1])
    id = context.bot.send_message(message.chat.id, "<b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –í–ê–®–ï–ô –°–î–ï–õ–ö–ï</b>\n\n"+text+"\n\n<b>–í–ê–ú –ó–ê–ü–õ–ê–¢–Ø–¢: "+pay_summ+"\n<code>{}</code>\n\n–°–í–Ø–ñ–ò–¢–ï–°–¨ –° –û–ë–ú–ï–ù–ù–ò–ö–û–ú {}, –î–û–ì–û–í–û–†–ò–¢–ï–°–¨ –û –î–ï–¢–ê–õ–Ø–• –í–ê–®–ï–ô –í–°–¢–†–ï–ß–ò</b>".format(m.merchant_delivery, m), reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton(text='‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å', callback_data='–ö–ª–∏–µ–Ω—Ç_–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª_—Å–¥–µ–ª–∫—É '+orderid)], [InlineKeyboardButton(text='‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å', callback_data='–ö–ª–∏–µ–Ω—Ç_–æ—Ç–º–µ–Ω–∏–ª_—Å–¥–µ–ª–∫—É '+orderid)]]), parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)
    time.sleep(0.2)
    client_name = "–ö–ª–∏–µ–Ω—Ç {}\n".format(u)
    id_m = context.bot.send_message(merchantid, "–ö–õ–ò–ï–ù–¢ –í–´–ë–†–ê–õ –í–ê–®–ï –ü–†–ï–î–õ–û–î–ï–ù–ò–ï\n\n"+client_name+text+text_fee+"\n–í–´ –ó–ê–ü–õ–ê–¢–ò–¢–ï –ö–õ–ò–ï–ù–¢–£ " +
                                    pay_summ, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')]]), parse_mode="HTML")
    m.message_id = id_m.message_id
    m.save()


def cmd_accepted_exchange_show(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    o = u.client_id_order_set.get(status='exchange')
    m = o.merchant_executor_id
    if o.pair in Pairs.get_dict():
        pair = Pairs.get_dict()[o.pair]
    else:
        pair = o.pair.split('/')[0]+' =>  '+o.pair.split('/')[1]
    period = Periods.get_dict()[o.period]
    text = "<b>–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code></b>".format(
        o.city, pair, pair.split(' =>  ')[0], int(o.summ), period, o.transfer)
    s = Suggestion.objects.get(order_id=o.id, merchant_executor_id=m.user_id)
    pay_summ = "{} {}".format(int(s.summ), pair.split(' =>  ')[1])
    id = context.bot.send_message(message.chat.id, "<b>–ê–ö–¢–ò–í–ù–´–ô –û–†–î–ï–†</b>\n\n"+text+"\n–í–ê–ú –ó–ê–ü–õ–ê–¢–Ø–¢ "+pay_summ+"\n\n<b>–°–í–Ø–ñ–ò–¢–ï–°–¨ –° –û–ë–ú–ï–ù–ù–ò–ö–û–ú {}, –î–û–ì–û–í–û–†–ò–¢–ï–°–¨ –û –î–ï–¢–ê–õ–Ø–• –í–ê–®–ï–ô –í–°–¢–†–ï–ß–ò</b>".format(m), reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton(text='‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å', callback_data='–ö–ª–∏–µ–Ω—Ç_–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª_—Å–¥–µ–ª–∫—É '+str(o.id))], [InlineKeyboardButton(text='‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å', callback_data='–ö–ª–∏–µ–Ω—Ç_–æ—Ç–º–µ–Ω–∏–ª_—Å–¥–µ–ª–∫—É '+str(o.id))]]), parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)


def cmd_finnaly_accepted_order(update: Update, context: CallbackContext, orderid: str):
    del_mes(update, context, True)
    message = get_message_bot(update)
    u = User.get_user(update, context)
    o = Order.objects.get(id=orderid)
    o.status = 'exchanged_succesfull'
    o.save()
    m = o.merchant_executor_id
    cmo = m.count_merchant_order
    m.count_merchant_order = cmo + 1
    cmos = m.count_merchant_order_success
    m.count_merchant_order_success = cmos + 1
    m.save()
    cuo = u.count_client_order
    u.count_client_order = cuo + 1
    cuos = u.count_client_order_success
    u.count_client_order_success = cuos + 1
    id = context.bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–±–º–µ–Ω–æ–º!!! –û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç 1 –¥–æ 5, –≥–¥–µ 5 —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞:", reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton(text='5', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä '+orderid+'__5'), InlineKeyboardButton(text='4', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä '+orderid+'__4')],
         [InlineKeyboardButton(
             text='3', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä '+orderid+'__3')],
         [InlineKeyboardButton(
             text='2', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä '+orderid+'__2')],
         [InlineKeyboardButton(text='1', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä '+orderid+'__1')]]), parse_mode="HTML")
    u.message_id = id.message_id
    u.state = static_state.S_FINNALY_ACCEPTED_ORDER
    u.save()


def answer_accepted_order(update: Update, context: CallbackContext, orderid: str = 'None'):
    del_mes(update, context, True)
    message = get_message_bot(update)
    u = User.get_user(update, context)
    if orderid != 'None':
        ord = orderid.split('__')[0]
        rank = orderid.split('__')[1]
        text = ''
    else:
        text = ''
        rank = 5
        ord = u.message_id
    o = Order.objects.get(id=ord)
    m = o.merchant_executor_id
    r, created = Rating.objects.update_or_create(who_id=u, whom_id=m, defaults={
        'rank': int(rank),
        'comment': text
    })
    id = context.bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤, –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—à –±–æ—Ç –≤ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –∏ –ø–∞–±–ª–∏–∫–∞—Ö, –ø—Ä–æ—Å—Ç–æ —Ä–µ–ø–æ—Å—Ç–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º.", reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')]]), parse_mode="HTML")
    u.message_id = id.message_id
    u.state = static_state.S_MENU
    u.save()
    if int(rank) >= 3:
        context.bot.send_message(
            message.chat.id, "@cash_lanka_bot - —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –æ—Ç –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ –®—Ä–∏–õ–∞–Ω–∫–µ!\n–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.", parse_mode="HTML")


def cmd_finnaly_rejected_order(update: Update, context: CallbackContext, orderid: str):
    del_mes(update, context, True)
    message = get_message_bot(update)
    u = User.get_user(update, context)
    o = Order.objects.get(id=orderid)
    o.status = 'exchanged_rejected'
    o.save()
    id = context.bot.send_message(message.chat.id, "–°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?", reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton(text='–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–±–º–µ–Ω–Ω–∏–∫–æ–º', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä ' +
                               orderid+'__'+'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–±–º–µ–Ω–Ω–∏–∫–æ–º')],
         [InlineKeyboardButton(text='–û–±–º–µ–Ω–Ω–∏–∫ –∏–∑–º–µ–Ω–∏–ª –∫—É—Ä—Å', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä ' +
                               orderid+'__'+'–û–±–º–µ–Ω–Ω–∏–∫_–∏–∑–º–µ–Ω–∏–ª_–∫—É—Ä—Å')],
         [InlineKeyboardButton(text='–ñ–¥–∞—Ç—å –¥–æ–ª—å—à–µ, —á–µ–º –∑–∞—è–≤–ª–µ–Ω–Ω–æ', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä ' +
                               orderid+'__'+'–ñ–¥–∞—Ç—å_–¥–æ–ª—å—à–µ,_—á–µ–º_–∑–∞—è–≤–ª–µ–Ω–Ω–æ')],
         [InlineKeyboardButton(text='–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä ' +
                               orderid+'__'+'–Ø_–ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)')],
         [InlineKeyboardButton(text='–ù–∞—à–µ–ª(–ª–∞) –∫—É—Ä—Å –ª—É—á—à–µ', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä ' +
                               orderid+'__'+'–ù–∞—à–µ–ª(–ª–∞)_–∫—É—Ä—Å_–ª—É—á—à–µ')],
         [InlineKeyboardButton(text='–û–±–º–µ–Ω–Ω–∏–∫ –ø–æ–ø—Ä–æ—Å–∏–ª –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data='–û—Ç–≤–µ—Ç_–Ω–∞_–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä ' +
                               orderid+'__'+'–û–±–º–µ–Ω–Ω–∏–∫_–ø–æ–ø—Ä–æ—Å–∏–ª_–æ—Ç–º–µ–Ω–∏—Ç—å_—Å–¥–µ–ª–∫—É')]
         ]), parse_mode="HTML")
    u.message_id = orderid  # –ø–∏—à–µ–º –æ—Ä–¥–µ—Ä, —á—Ç–æ–± –ø–æ—Ç–æ–º –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É
    u.state = static_state.S_FINNALY_REJECTED_ORDER
    u.save()


def answer_rejected_order(update: Update, context: CallbackContext, orderid: str = 'None'):
    del_mes(update, context, True)
    message = get_message_bot(update)
    u = User.get_user(update, context)
    if orderid != 'None':
        ord = orderid.split('__')[0]
        text = orderid.split('__')[1].replace('_', ' ')
    else:
        text = ''
        ord = u.message_id
    o = Order.objects.get(id=ord)
    m = o.merchant_executor_id
    if text == '' and text != '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)' and text != '–ù–∞—à–µ–ª(–ª–∞) –∫—É—Ä—Å –ª—É—á—à–µ':
        cmo = m.count_merchant_order
        m.count_merchant_order = cmo + 1
        m.save()
    if text == '' or text == '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)' or text == '–ù–∞—à–µ–ª(–ª–∞) –∫—É—Ä—Å –ª—É—á—à–µ':
        cuo = u.count_client_order
        u.count_client_order = cuo + 1
    if message.text != None and message.text != '':
        text = message.text
    r, created = Rating.objects.update_or_create(who_id=u, whom_id=m, defaults={
        'rank': 0,
        'comment': text
    })
    id = context.bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')]]), parse_mode="HTML")
    u.message_id = id.message_id
    u.state = static_state.S_MENU
    u.save()


#####################################
#####################################
#####################################


# –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞ ## merchant_story
def cmd_merchant(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    if u.merchant_client != 'None' and u.merchant_client != 'under_consideration':
        cmd_menu_merchant(update, context)
        return
    if u.merchant_client == 'under_consideration':
        merchant_terms_of_use_agreed(update, context)
        return
    User.set_user_state(update, context, static_state.S_MENU)
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
    btn_yes = InlineKeyboardButton(
        text='‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data='–ü—Ä–∞–≤–∏–ª–∞_—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã')
    btn_no = InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='–ú–µ–Ω—é')
    buttons.append([btn_yes, btn_no])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(message.chat.id, "–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–Ω–∞–ª –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –®—Ä–∏-–õ–∞–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.\n\n{}\n\n<b>–í–´ –°–û–ì–õ–ê–°–ù–´ –° –£–°–õ–û–í–ò–Ø–ú–ò?</b>".format(
        Terms.get_dict()['terms_of_use_merchant']), reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)
    del_mes(update, context, True)


# –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞
def merchant_terms_of_use_agreed(update: Update, context: CallbackContext):
    # –ü–æ–º–µ–Ω—è—Ç—å 'True' –Ω–∞ 'under_consideration' –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.
    User.set_merchant_client(update, context, 'True')
    message = get_message_bot(update)
    u = User.get_user(update, context)
    if u.merchant_client == 'under_consideration':
        text = '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å—Ç–∞—Ç—å –æ–±–º–µ–Ω–Ω–∏–∫–æ–º.\n\n!!! –°–í–Ø–ñ–ò–¢–ï–°–¨  –°  @sri_seacher  –î–õ–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –ü–†–û–í–ï–†–ö–ò –õ–ò–ß–ù–û–°–¢–ò !!!'
        buttons = []
        btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
        buttons.append([btn_back])
        markup = InlineKeyboardMarkup(buttons)
        id = context.bot.send_message(
            message.chat.id, text, reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
        del_mes(update, context, True)
        return
    cmd_menu_merchant(update, context)


# –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∏–∑ –±–∞–∑—ã.
def merchant_course(update: Update, context: CallbackContext):
    del_mes(update, context, True)
    message = get_message_bot(update)
    User.set_user_state(update, context, static_state.S_MENU)
    p2p_last = P2p.objects.latest('timestamp').__dict__
    text = '<b><i>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å —Å </i>P2P Binance<i>\n–∏ —Å–ª—É–∂–∞—Ç –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i></b>\n\n<code>{}</code> RUB/USDT  (–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å)\nRUB/ <code>{}</code> LKR  (–®—Ä–∏-–ª–∞–Ω–∫–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è)\nUSDT/ <code>{}</code> LKR  (–®—Ä–∏-–ª–∞–Ω–∫–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è)\n<code>{}</code> UAH/USDT  (–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ì—Ä–∏–≤–Ω–∞)\nUAH/ <code>{}</code> LKR  (–®—Ä–∏-–ª–∞–Ω–∫–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è)\n<code>{}</code> EUR/USDT    (–ï–≤—Ä–æ)\nEUR/ <code>{}</code> LKR  (–®—Ä–∏-–ª–∞–Ω–∫–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è)\n<code>{}</code> USD/USDT    (–î–æ–ª–ª–∞—Ä)\nKZT/ <code>{}</code> LKR  (–®—Ä–∏-–ª–∞–Ω–∫–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è)\n<code>{}</code> KZT/USDT    (–¢–µ–Ω–≥–µ)\n\n'.format(
        p2p_last['rub_tinkoff_usdt'], round(float(p2p_last['usdt_lkr'])/float(p2p_last['rub_tinkoff_usdt']), 2), p2p_last['usdt_lkr'], p2p_last['uah_usdt'], round(float(p2p_last['usdt_lkr'])/float(p2p_last['uah_usdt']), 2), p2p_last['eur_revolut_usdt'], round(float(p2p_last['usdt_lkr'])/float(p2p_last['eur_revolut_usdt']), 2), p2p_last['usd_tinkoff_usdt'], round(float(p2p_last['usdt_lkr'])/float(p2p_last['kzt_usdt']), 2), p2p_last['kzt_usdt'])
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)


# –ú–µ–Ω—é –æ–±–º–µ–Ω–Ω–∏–∫–∞
def cmd_menu_merchant(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    if u.merchant_client == 'None':
        cmd_merchant(update, context)
        return
    del_mes(update, context, True)
    User.set_user_state(update, context, static_state.S_MENU)
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
    btn_course = InlineKeyboardButton(
        text='üìâüìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='–ö—É—Ä—Å_–≤–∞–ª—é—Ç')
    btn_actual_orders_merchant = InlineKeyboardButton(
        text='üì• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏', callback_data='–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ_–∑–∞—è–≤–∫–∏')
    btn_orders = InlineKeyboardButton(
        text='üì® –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', callback_data='–ó–∞–∫–∞–∑—ã_–ú–µ—Ä—á–∞–Ω—Ç')
    btn_orders_suggestion = InlineKeyboardButton(
        text='üßßüßæ –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç–æ—Ä–≥—É–µ–º—Å—è', callback_data='–ú–æ–∏_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
    btn_orders_completed = InlineKeyboardButton(
        text='‚úÖüßæ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã')
    merchant_status = u.merchant_status
    if merchant_status == 'None' or merchant_status == 'pause':
        merchant_status_ru = 'üõã –°—Ç–∞—Ç—É—Å: –ü–∞—É–∑–∞'
        callback = '–°–º–µ–Ω–∞_—Å—Ç–∞—Ç—É—Å–∞'
    if merchant_status == 'online':
        merchant_status_ru = '‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω'
        callback = '–°–º–µ–Ω–∞_—Å—Ç–∞—Ç—É—Å–∞'
    if merchant_status == 'dolg':
        merchant_status_ru = '‚ÄºÔ∏è –°—Ç–∞—Ç—É—Å: –î–æ–ª–≥'
        callback = '–°–º–µ–Ω–∞_—Å—Ç–∞—Ç—É—Å–∞'
    btn_status = InlineKeyboardButton(
        text=merchant_status_ru, callback_data=callback)
    btn_settings = InlineKeyboardButton(
        text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    buttons.append([btn_settings, btn_status])
    buttons.append([btn_course])
    buttons.append([btn_actual_orders_merchant])
    buttons.append([btn_orders])
    buttons.append([btn_orders_suggestion])
    buttons.append([btn_orders_completed])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(message.chat.id, "–ú–ï–ù–Æ –û–ë–ú–ï–ù–ù–ò–ö–ê:\n\n <b>‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω</b> - –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –∏ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n–ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤.\n\n<b>üõã –°—Ç–∞—Ç—É—Å: –ü–∞—É–∑–∞</b> - –í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã –Ω–µ –≤–∏–¥–Ω—ã –≤ –≥–æ—Ä–æ–¥–∞—Ö.\n –ù–æ –≤—ã –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.\n\n<b>‚ÄºÔ∏è –°—Ç–∞—Ç—É—Å: –î–æ–ª–≥</b> - –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≥–∞—Å–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @sri_seacher", reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)


# –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
def merchant_change_status(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    merchant_status = u.merchant_status
    if merchant_status == 'None' or merchant_status == 'pause':
        u.merchant_status = 'online'
    if merchant_status == 'online':
        u.merchant_status = 'pause'
    u.save()
    cmd_menu_merchant(update, context)


# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞.
def merchant_settings(update: Update, context: CallbackContext, text: str = 'None'):
    del_mes(update, context, True)
    message = get_message_bot(update)
    u = User.get_user(update, context)
    if u.state != static_state.S_DELIVERY_COST:
        User.set_user_state(update, context, static_state.S_MENU)
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
    btn_yes = InlineKeyboardButton(
        text='üíµ –ú–æ–∏ –¥–æ–ª–≥–∏', callback_data='–ú–æ–∏_–¥–æ–ª–≥–∏')
    btn_no = InlineKeyboardButton(
        text='üèò –ú–æ–∏ –≥–æ—Ä–æ–¥–∞', callback_data='–ú–æ–∏_–≥–æ—Ä–æ–¥–∞')
    btn_delivery = InlineKeyboardButton(
        text=u.merchant_delivery, callback_data='–î–æ—Å—Ç–∞–≤–∫–∞_–∫–µ—à')
    buttons.append([btn_yes, btn_no])
    buttons.append([btn_delivery])
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    if text == 'None':
        text = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞\n\n –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n üõª –î–æ—Å—Ç–∞–≤–∫–∞: –°–∞–º–æ–≤—ã–≤–æ–∑–æ–º\n üõª –î–æ—Å—Ç–∞–≤–∫–∞: –î–æ—Å—Ç–∞–≤–ª—è—é –¥–µ–Ω—å–≥–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n üõª –î–æ—Å—Ç–∞–≤–∫–∞: –ü–ª–∞—Ç–Ω–æ, –∑–∞ –•–•–• –≤–∞–ª—é—Ç—ã'

    id = context.bot.send_message(
        message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∞


def merchant_delivery(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    merchant_delivery_ru = u.merchant_delivery
    if merchant_delivery_ru == 'üõª –î–æ—Å—Ç–∞–≤–∫–∞: –°–∞–º–æ–≤—ã–≤–æ–∑–æ–º':
        u.merchant_delivery = 'üõª –î–æ—Å—Ç–∞–≤–∫–∞: –î–æ—Å—Ç–∞–≤–ª—è—é –¥–µ–Ω—å–≥–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ'
        u.save()
        merchant_settings(update, context)
    if merchant_delivery_ru == 'üõª –î–æ—Å—Ç–∞–≤–∫–∞: –î–æ—Å—Ç–∞–≤–ª—è—é –¥–µ–Ω—å–≥–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ' or merchant_delivery_ru == 'üõª –î–æ—Å—Ç–∞–≤–∫–∞: –î–æ—Å—Ç–∞–≤–ª—è—é –¥–µ–Ω—å–≥–∏':
        u.merchant_delivery = 'üõª –î–æ—Å—Ç–∞–≤–∫–∞: –ü–ª–∞—Ç–Ω–æ, –∑–∞ '
        u.state = static_state.S_DELIVERY_COST
        u.save()
        merchant_settings(
            update, context, '<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ LKR –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–µ–Ω–µ–≥</b>')
    if 'üõª –î–æ—Å—Ç–∞–≤–∫–∞: –ü–ª–∞—Ç–Ω–æ, –∑–∞' in merchant_delivery_ru:
        u.merchant_delivery = 'üõª –î–æ—Å—Ç–∞–≤–∫–∞: –°–∞–º–æ–≤—ã–≤–æ–∑–æ–º'
        u.save()
        merchant_settings(update, context)


def merchant_delivery_cost(update: Update, context: CallbackContext):
    u, _ = User.get_user_and_created(update, context)
    message = get_message_bot(update)
    try:
        summ_text = int(message.text)
        text = u.merchant_delivery
        u.merchant_delivery = str(text) + str(summ_text) + ' LKR'
        u.state = static_state.S_MENU
        u.save()
        merchant_settings(update, context)
    except:
        merchant_settings(update, context)

# –ø–æ–º–µ—á–∞–µ–º –≥–æ—Ä–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å


def change_merchat_city(update: Update, context: CallbackContext, city_merchant: str):
    u = User.get_user(update, context)
    c = Cities.objects.get(ru_name=city_merchant)
    try:
        check_city = MerchantsCities.objects.get(merchant_id=u, city_id=c)
        check_city.delete()
    except:
        MerchantsCities.objects.create(merchant_id=u, city_id=c)
    merchant_cities(update, context)

# –ú–æ–∏ –≥–æ—Ä–æ–¥–∞


def merchant_cities(update: Update, context: CallbackContext):
    del_mes(update, context, True)
    u = User.get_user(update, context)
    message = get_message_bot(update)
    User.set_user_state(update, context, static_state.S_MENU)
    merchant_city = [k['city_id'] for k in list(u.merchant_id_cities_set.all().values(
        'city_id'))]  # –ø–æ–ª—É—á–∞–µ–º id –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞
    merchant_cities = Cities.objects.filter(
        id__in=merchant_city)  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    cities = Cities.objects.all().order_by('ru_name')
    # –°–ø–∏—Å–æ–∫ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å–≤–∏—è
    cities_checked = {obj.ru_name: 'checked' for obj in merchant_cities}
    # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    cities_unchecked = {obj.ru_name: 'unchecked' for obj in cities}
    buttons = []
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≥–æ—Ä–æ–¥–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å–≤–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∏ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    cities_unchecked.update(cities_checked)
    if len(cities_unchecked) >= 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞
        count = 0
        for k in cities_unchecked:  # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
            if cities_unchecked[k] == 'checked':
                box = ' ‚úÖ'
            if cities_unchecked[k] == 'unchecked':
                box = ' ‚èπ'
            count += 1
            # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —á–µ—Ç–Ω—ã–π, —Ç–æ –ø–æ–º–µ—â–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            if len(cities_unchecked) == count and len(cities_unchecked) % 2 != 0:
                city = InlineKeyboardButton(
                    k + box, callback_data='–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞ '+k)
                buttons.append([city])
                break
            if count % 2 != 0:  # –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –ø–∏—à–µ–º –ø–æ 2 –≤ —Ä—è–¥
                city_a = InlineKeyboardButton(
                    k + box, callback_data='–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞ '+k)
            else:
                city_b = InlineKeyboardButton(
                    k + box, callback_data='–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞ '+k)
                buttons.append([city_a, city_b])
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, "–û—Ç–º–µ—Ç—å –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—à—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–±—ä–º–µ–Ω:", reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)


# –ø–æ–º–µ—á–∞–µ–º –≥–æ—Ä–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def change_merchat_city(update: Update, context: CallbackContext, city_merchant: str):
    u = User.get_user(update, context)
    c = Cities.objects.get(ru_name=city_merchant)
    try:
        check_city = MerchantsCities.objects.get(merchant_id=u, city_id=c)
        check_city.delete()
    except:
        MerchantsCities.objects.create(merchant_id=u, city_id=c)
    merchant_cities(update, context)


# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏
def actual_orders(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    User.set_user_state(update, context, static_state.S_MENU)
    cities_id = list(u.merchant_id_cities_set.all(
    ).values_list('city_id_id', flat=True))
    cities = list(Cities.objects.filter(
        id__in=cities_id).values_list('ru_name', flat=True))
    suggestions = list(
        u.merchant_executor_id_suggestion_set.all().values_list('order_id', flat=True))
    status__in = ['active', 'active_v2', 'mailing']
    if u.is_admin:
        status__in = ['admining', 'active_v2']
    orders = Order.objects.filter(city__in=cities, status__in=status__in, timestamp_execut__gte=time.time(
    )).exclude(id__in=suggestions).order_by('timestamp_execut')[:5]
    text = '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –ø–æ–∫–∞ –Ω–µ—Ç'
    if u.merchant_status in ['dolg']:
        text = '–£ –≤–∞—Å –Ω–µ –ø–æ–≥–∞—à–µ–Ω –¥–æ–ª–≥, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @sri_seacher'
    try:
        if len(orders) >= 1 and u.merchant_status not in ['dolg']:
            for i in orders:
                if i.pair in Pairs.get_dict():
                    pair = Pairs.get_dict()[i.pair]
                else:
                    pair = i.pair.split('/')[0]+' =>  '+i.pair.split('/')[1]
                period = Periods.get_dict()[i.period]
                ts = int(i.timestamp_execut) + (60*60*5.5)
                dt = datetime.datetime.fromtimestamp(
                    ts).strftime('%Y-%m-%d %H:%M:%S')
                buttons = [
                    [InlineKeyboardButton(
                        text='üíµ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—É–º–º—É', callback_data='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å ' + str(i.id)),
                     InlineKeyboardButton(
                        text='üíµ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫—É—Ä—Å', callback_data='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å_–∫—É—Ä—Å ' + str(i.id))]
                ]
                if u.is_admin or (i.status == 'active_v2' and not u.is_admin):
                    btn_admin = InlineKeyboardButton(
                        text='‚ÄºÔ∏èüíµ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–±—Ä–∞—Ç—å –∑–∞—è–≤–∫—É —Å–µ–±–µ', callback_data="–ó–±–∞—Ä–∞—Ç—å_–∑–∞—è–≤–∫—É " + str(i.id))
                    buttons.append([btn_admin])
                bts = InlineKeyboardMarkup(buttons)
                context.bot.send_message(message.chat.id, "<b>–ê–ö–¢–£–ê–õ–¨–ù–´–ô –û–†–î–ï–†\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code></b>\n\n–ê—Ç—É–∞–ª—å–Ω–æ –¥–æ <b>{}</b>\n–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <i><b>{} USDT</b></i>".format(
                    i.city, pair, pair.split(' =>  ')[0], int(i.summ), period, i.transfer, dt, i.order_fee), reply_markup=bts, parse_mode="HTML")
                time.sleep(0.2)
            text = '<b>–°–î–ï–õ–ê–ô–¢–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–û –ò–ù–¢–ï–†–ï–°–ù–û–ô –í–ê–ú –ó–ê–Ø–í–ö–ï</b>'
    except:
        pass
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)


# –ú–æ–∏ –¥–æ–ª–≥–∏
def merchant_debts(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    User.set_user_state(update, context, static_state.S_MENU)
    orders = u.merchant_executor_id_order_set.filter(
        status='exchanged_succesfull', status_fee='invoiced', order_fee__gt=0).order_by('timestamp_execut').reverse()
    text = '–î–æ–ª–≥–æ–≤ –Ω–µ—Ç'
    if len(orders) >= 1:
        summ_debt = 0
        tt = ''
        list_text = ''
        for i in orders:
            if i.pair in Pairs.get_dict():
                pair = Pairs.get_dict()[i.pair]
            else:
                pair = i.pair.split('/')[0]+' =>  '+i.pair.split('/')[1]
            period = Periods.get_dict()[i.period]
            summ_debt += i.order_fee
            sug_text = ''
            try:
                sug = Suggestion.objects.get(
                    order_id=i.id, merchant_executor_id=i.merchant_executor_id)
                if u == sug.merchant_executor_id:
                    sug_text += str(int(sug.summ))+' ' + \
                        str(pair.split(' =>  ')[1])
                    sug_text += '\n'
            except:
                pass
            list_text = "<b>–í–´–ü–û–õ–ù–ï–ù–ù–´–ô –û–†–î–ï–†\n–ö–ª–∏–µ–Ω—Ç {}\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code></b>\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n{}\n\n–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <i><b>{} USDT</b></i>\n\n".format(
                i.client_id, i.city, pair, pair.split(' =>  ')[0], int(i.summ), period, i.transfer, sug_text, i.order_fee)
            if len(tt+list_text) > 4096:
                context.bot.send_message(
                    message.chat.id, tt, parse_mode="HTML")
                tt = list_text
            else:
                tt += list_text
            time.sleep(0.2)
        context.bot.send_message(
            message.chat.id, tt, parse_mode="HTML")
        inv = Invoice.objects.get(payer_id_id=u)
        text = '–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω ‚ÄºÔ∏è –°—Ç–∞—Ç—É—Å: –î–æ–ª–≥.\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É {} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Tron TRC20\n<code>TXBXgpaM5jCXVq45m8UNTuJaA4oJkSUQbY</code>\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω\n\n <b>–í–ù–ò–ú–ê–ù–ò–ï!!!!\n\n –ï–°–õ–ò –û–¢–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–£–ú–ú–ê –ù–ï –ë–£–î–ï–¢ –°–û–í–ü–ê–î–ê–¢–¨, –¢–û –ü–õ–ê–¢–ï–ñ –ù–ï –ó–ê–ß–¢–ï–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ò –í–ê–ú –ù–£–ñ–ù–û –ë–£–î–ï–¢ –ü–ò–°–ê–¢–¨ –í –ü–û–î–î–ï–†–ñ–ö–£.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @sri_seacher</b>'.format(
            inv.summ_invoice)
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)


# –ú–æ–∏ –∑–∞–∫–∞–∑—ã
def merchant_orders(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    User.set_user_state(update, context, static_state.S_MENU)
    orders = u.merchant_executor_id_order_set.filter(
        status='exchange', timestamp_execut__lte=time.time()).order_by('timestamp_execut').reverse()[:5]
    text = '–û—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç'
    try:
        if len(orders) >= 1:
            text = '–í–µ—Ä–Ω—É—Ç—å—Å—è'
            for i in orders:
                if i.pair in Pairs.get_dict():
                    pair = Pairs.get_dict()[i.pair]
                else:
                    pair = i.pair.split('/')[0]+' =>  '+i.pair.split('/')[1]
                period = Periods.get_dict()[i.period]
                time.sleep(0.2)
                context.bot.send_message(message.chat.id, "<b>–û–†–î–ï–† –í –†–ê–ë–û–¢–ï\n–ö–ª–∏–µ–Ω—Ç {}\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code></b>\n\n".format(
                    i.client_id, i.city, pair, pair.split(' =>  ')[0], int(i.summ), period, i.transfer), parse_mode="HTML")
    except:
        pass
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –ú–æ–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã


def merchant_orders_completed(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    User.set_user_state(update, context, static_state.S_MENU)
    orders = u.merchant_executor_id_order_set.filter(
        status='exchanged_succesfull').order_by('timestamp_execut').reverse()[:5]
    text = '–û—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç'
    if len(orders) >= 1:
        text = '–í–µ—Ä–Ω—É—Ç—å—Å—è'
        for i in orders:
            if i.pair in Pairs.get_dict():
                pair = Pairs.get_dict()[i.pair]
            else:
                pair = i.pair.split('/')[0]+' =>  '+i.pair.split('/')[1]
            period = Periods.get_dict()[i.period]
            time.sleep(0.2)
            context.bot.send_message(message.chat.id, "<b>–í–´–ü–û–õ–ù–ï–ù–ù–´–ô –û–†–î–ï–†\n–ö–ª–∏–µ–Ω—Ç {}\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code></b>\n\n".format(
                i.client_id, i.city, pair, pair.split(' =>  ')[0], int(i.summ), period, i.transfer), parse_mode="HTML")
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è


def merchant_suggestions(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    del_mes(update, context, True)
    User.set_user_state(update, context, static_state.S_MENU)
    suggestions = list(
        u.merchant_executor_id_suggestion_set.all().values_list('order_id', flat=True))
    orders = Order.objects.filter(id__in=suggestions, status__in=[
                                  'active', 'mailing'])[:5]
    text = '–û—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç'
    try:
        if len(orders) >= 1:
            text = '–í–µ—Ä–Ω—É—Ç—å—Å—è'
            for i in orders:
                if i.pair in Pairs.get_dict():
                    pair = Pairs.get_dict()[i.pair]
                else:
                    pair = i.pair.split('/')[0]+' =>  '+i.pair.split('/')[1]
                period = Periods.get_dict()[i.period]
                sug_text = ''
                s = Order.objects.get(id=i.id)
                ts = int(i.timestamp_execut) + (60*60*5.5)
                dt = datetime.datetime.fromtimestamp(
                    ts).strftime('%Y-%m-%d %H:%M:%S')
                for sug in s.order_id_suggestion_set.all():
                    sug_text += '–°—É–º–º–∞: ' + str(int(sug.summ))+' ' + \
                        str(pair.split(' =>  ')[1]) + ' –ö—É—Ä—Å: ' + \
                        str(round(float(sug.summ)/float(i.summ), 2))
                    if u == sug.merchant_executor_id:
                        sug_text += ' –æ—Ç –í–∞—Å ‚úÖ'
                    sug_text += '\n'
                bts = InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        text='üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å ' + str(i.id)),
                     InlineKeyboardButton(
                        text='üíµ –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å', callback_data='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å_–∫—É—Ä—Å ' + str(i.id))]
                ])
                context.bot.send_message(message.chat.id, "<b>–ó–ê–Ø–í–ö–ê –í –ü–†–û–¶–ï–°–°–ï –ü–û–î–ë–û–†–ê –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø:\n\n–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ \\ –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <code>{} \\ {}   {}%</code>\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code>\n\n–ê—Ç—É–∞–ª—å–Ω–æ –¥–æ <b>{}</b>\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:\n{}</b>".format(
                    i.client_id.count_client_order_success, i.client_id.count_client_order, round(i.client_id.count_client_order_success / i.client_id.count_client_order * 100, 2), i.city, pair, pair.split(' =>  ')[0], int(i.summ), period, i.transfer, dt, sug_text), reply_markup=bts, parse_mode="HTML")
                time.sleep(0.2)
    except:
        pass
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
    buttons.append([btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id, text, reply_markup=markup, parse_mode="HTML")
    User.set_message_id(update, context, id.message_id)

# –ó–∞–±—Ä–∞—Ç—å –∑–∞—è–≤–∫—É –î–æ—Å—Ç—É–ø–Ω–æ –ê–¥–º–∏–Ω–∞–º –∏ –ø–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º


def execute_order(update: Update, context: CallbackContext, order_id: str = 'None'):
    message = get_message_bot(update)
    User.set_user_state(
        update, context, static_state.S_ENTERED_SUMM_EXECUTING)
    o = Order.objects.get(id=int(order_id))
    if o.status in ['admining', 'active_v2']:
        try:
            city = o.city
            if o.pair in Pairs.get_dict():
                pair = Pairs.get_dict()[o.pair]
            else:
                pair = o.pair.split('/')[0]+' =>  '+o.pair.split('/')[1]
            summ = int(o.summ)
            period = Periods.get_dict()[o.period]
            order_fee = o.order_fee
            User.set_merchant_client(update, context, order_id)
            User.set_message_id(update, context, message.message_id)
            text = "<b>–ó–ê–Ø–í–ö–ê –ù–ê –û–ë–ú–ï–ù\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code>\n\n –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <code>{}</code> USDT\n\n\n –í–í–ï–î–ò–¢–ï –°–£–ú–ú–£ –¶–ò–§–†–û–ô –í {}</b>".format(
                city, pair, pair.split(' => ')[0], summ, period, o.transfer, order_fee, pair.split(' => ')[1])
            buttons = []
            btn_back = InlineKeyboardButton(
                text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è')
            buttons.append([btn_back])
            markup = InlineKeyboardMarkup(buttons)
            context.bot.edit_message_text(chat_id=message.chat.id, text=text,
                                          message_id=message.message_id, reply_markup=markup, parse_mode="HTML")
            return
        except:
            merchant_suggestion_cancel(update, context)
    else:
        merchant_suggestion_cancel(update, context)


# –ó–∞–±–∏—Ä–∞–µ–º –∑–∞—è–≤–∫—É
def merchant_executing_summ(update: Update, context: CallbackContext, order_id: str = 'None'):
    del_mes(update, context)
    u = User.get_user(update, context)
    message = get_message_bot(update)
    order_id = u.merchant_client
    summ = float(message.text)
    o = Order.objects.get(id=int(order_id))
    if o.status in ['admining', 'active_v2']:
        if isfloat(summ):
            User.set_user_state(update, context, static_state.S_MENU)
            s, created = Suggestion.objects.update_or_create(order_id=o, merchant_executor_id=u, defaults={
                'summ': summ
            })
            success = u.count_merchant_order_success
            count_merchant_order = u.count_merchant_order
            percent = 0
            if count_merchant_order != 0:
                percent = round(u.count_merchant_order_success /
                                u.count_merchant_order * 100, 2)
            username = str(u)
            un_ = username.split('@')[1]
            username_secure = '@' + \
                un_[0] + un_[1] + '******' + un_[-2] + un_[-1]
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            text = '<b>{}\n–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ \\ –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <code>{} \\ {}   {}%</code>\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—É–º–º–∞ {}\n<code>{}</code></b>'.format(
                username_secure, success, count_merchant_order, percent, int(summ), u.merchant_delivery)
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(text='‚úÖ –í—ã–±–∏—Ä–∞—é —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='–í—ã–±–∏—Ä–∞—é_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ '+str(
                    o.id)+'_'+str(u.user_id))]
            ])
            context.bot.send_message(
                o.client_id.user_id, text, reply_markup=markup, parse_mode="HTML")
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            o.status = 'waiting_client'
            o.save()
        context.bot.delete_message(message.chat.id, u.message_id)
    else:
        merchant_suggestion_cancel(update, context)


# –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—É–º–º—É –Ω–∞ –æ–±–º–µ–Ω
def merchant_suggestion(update: Update, context: CallbackContext, order_id: str = 'None'):
    message = get_message_bot(update)
    User.set_user_state(
        update, context, static_state.S_ENTERED_SUMM_SUGGESTION)
    o = Order.objects.get(id=int(order_id))
    if o.status in ['active', 'mailing', 'admining']:
        try:
            city = o.city
            if o.pair in Pairs.get_dict():
                pair = Pairs.get_dict()[o.pair]
            else:
                pair = o.pair.split('/')[0]+' =>  '+o.pair.split('/')[1]
            summ = int(o.summ)
            period = Periods.get_dict()[o.period]
            order_fee = o.order_fee
            User.set_merchant_client(update, context, order_id)
            User.set_message_id(update, context, message.message_id)
            text = "<b>–ó–ê–Ø–í–ö–ê –ù–ê –û–ë–ú–ï–ù\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code>\n\n –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <code>{}</code> USDT\n\n\n –í–í–ï–î–ò–¢–ï –°–£–ú–ú–£ –¶–ò–§–†–û–ô –í {}</b>".format(
                city, pair, pair.split(' => ')[0], summ, period, o.transfer, order_fee, pair.split(' => ')[1])
            buttons = []
            btn_back = InlineKeyboardButton(
                text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è')
            buttons.append([btn_back])
            markup = InlineKeyboardMarkup(buttons)
            context.bot.edit_message_text(chat_id=message.chat.id, text=text,
                                          message_id=message.message_id, reply_markup=markup, parse_mode="HTML")
        except:
            merchant_suggestion_cancel(update, context)
    else:
        merchant_suggestion_cancel(update, context)

# –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å_–∫—É—Ä—Å —Å—É–º–º—É –Ω–∞ –æ–±–º–µ–Ω


def merchant_suggestion_course(update: Update, context: CallbackContext, order_id: str = 'None'):
    message = get_message_bot(update)
    User.set_user_state(
        update, context, static_state.S_ENTERED_COURSE_SUGGESTION)
    o = Order.objects.get(id=int(order_id))
    if o.status in ['active', 'mailing', 'admining']:
        try:
            city = o.city
            if o.pair in Pairs.get_dict():
                pair = Pairs.get_dict()[o.pair]
            else:
                pair = o.pair.split('/')[0]+' =>  '+o.pair.split('/')[1]
            summ = int(o.summ)
            period = Periods.get_dict()[o.period]
            order_fee = o.order_fee
            User.set_merchant_client(update, context, order_id)
            User.set_message_id(update, context, message.message_id)
            text = "<b>–ó–ê–Ø–í–ö–ê –ù–ê –û–ë–ú–ï–ù\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n–í–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ <code>{}</code>\n\n –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <code>{}</code> USDT\n\n\n –í–í–ï–î–ò–¢–ï –ö–£–†–° –¶–ò–§–†–û–ô –ö {}</b>".format(
                city, pair, pair.split(' => ')[0], summ, period, o.transfer, order_fee, pair.split(' => ')[1])
            buttons = []
            btn_back = InlineKeyboardButton(
                text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è')
            buttons.append([btn_back])
            markup = InlineKeyboardMarkup(buttons)
            context.bot.edit_message_text(chat_id=message.chat.id, text=text,
                                          message_id=message.message_id, reply_markup=markup, parse_mode="HTML")
        except:
            merchant_suggestion_cancel(update, context)
    else:
        merchant_suggestion_cancel(update, context)

# –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—É–º–º—ã


def merchant_suggestion_cancel(update: Update, context: CallbackContext):
    User.set_user_state(update, context, static_state.S_MENU)
    del_mes(update, context)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É


def merchant_suggestion_summ(update: Update, context: CallbackContext):
    del_mes(update, context)
    u = User.get_user(update, context)
    message = get_message_bot(update)
    order_id = u.merchant_client
    summ = message.text.replace(",", ".")
    if isfloat(summ):
        o = Order.objects.get(id=int(order_id))
        summ = float(summ.replace(",", "."))
        if u.state == static_state.S_ENTERED_COURSE_SUGGESTION:
            summ = float(summ) * float(o.summ)
        User.set_user_state(update, context, static_state.S_MENU)
        s, created = Suggestion.objects.update_or_create(order_id=o, merchant_executor_id=u, defaults={
            'summ': summ
        })
        o.status = 'mailing'
        o.save()
    try:
        context.bot.delete_message(message.chat.id, u.message_id)
    except:
        try:
            context.bot.delete_message(message.chat.id, u.message_id)
        except:
            try:
                context.bot.delete_message(message.chat.id, u.message_id)
            except:
                pass


###################################
###################################
def cmd_help(update: Update, context: CallbackContext):
    del_mes(update, context, True)
    message = get_message_bot(update)
    buttons = []
    btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
    btn_main = InlineKeyboardButton(text='‚èÆ –í –Ω–∞—á–∞–ª–æ', callback_data='–°—Ç–∞—Ä—Ç')
    buttons.append([btn_main, btn_back])
    markup = InlineKeyboardMarkup(buttons)
    id = context.bot.send_message(
        message.chat.id,
        """<b>–ü–û–ú–û–©–¨</b>
        
        <a href="https://telegra.ph/FAQ-dlya-obmennikov-04-30">FAQ –¥–ª—è –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤</a>
        <a href="https://telegra.ph/Poshagovaya-instrukciya-Kak-menyat-po-samomu-vygodnomu-kursu-na-SHri-Lanke-04-30">–ö–∞–∫ —Å—Ç–∞—Ç—å –æ–±–º–µ–Ω–Ω–∏–∫–æ–º?</a>
        <a href="https://telegra.ph/Usloviya-polzovaniem-botom-dlya-obmennikov-05-06">–£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–æ–º (–¥–ª—è –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤)</a>
        """,
        reply_markup=markup, parse_mode="HTML", disable_web_page_preview=True)
    User.set_message_id(update, context, id.message_id)


def cmd_admin(update: Update, context: CallbackContext):
    del_mes(update, context, True)
    u = User.get_user(update, context)
    if u.is_admin:
        message = get_message_bot(update)
        buttons = []
        btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
        btn_main = InlineKeyboardButton(
            text='‚èÆ –í –Ω–∞—á–∞–ª–æ', callback_data='–°—Ç–∞—Ä—Ç')
        buttons.append([btn_main, btn_back])
        markup = InlineKeyboardMarkup(buttons)
        id = context.bot.send_message(message.chat.id, "üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:\n–≤—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n<code>{}</code>".format(
            P2p.pay_trade_history()), reply_markup=markup, parse_mode="HTML")
        User.set_message_id(update, context, id.message_id)
    else:
        command_start(update, context)


def cmd_pass():
    pass


# —Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –ú–µ–Ω—é –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
State_Dict = {
    # –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–æ –ú–µ–Ω—é, –º—ã –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —É–¥–∞–ª—è–µ—Ç—Å—è
    static_state.S_MENU: del_mes,
    static_state.S_ENTERED_PAIR: cmd_periods,
    static_state.S_TYPE_PAIR_CUSTOME: user_type_pair_custome,
    # –û–±–º–µ–Ω–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞
    static_state.S_ENTERED_SUMM_EXECUTING: merchant_executing_summ,
    static_state.S_ENTERED_SUMM_SUGGESTION: merchant_suggestion_summ,
    static_state.S_ENTERED_COURSE_SUGGESTION: merchant_suggestion_summ,
    static_state.S_FINNALY_REJECTED_ORDER: answer_rejected_order,
    static_state.S_FINNALY_ACCEPTED_ORDER: answer_rejected_order,
    static_state.S_DELIVERY_COST: merchant_delivery_cost,
    # –û–∂–∏–¥–∞–µ–º –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ—Ç —á–∞—Å, —á—Ç–æ–± —Å–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å, –¥–æ —ç—Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    static_state.S_ACCEPTED_ORDER: del_mes,
    static_state.S_ACCEPTED_EXCHANGE: del_mes,
}

# —Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –ú–µ–Ω—é
Menu_Dict = {
    '–°—Ç–∞—Ä—Ç': command_start,
    '–ú–µ–Ω—é': cmd_menu,
    '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ': cmd_admin,
    '–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç': start_client,
    '–ó–∞–∫–∞–∑—ã_–ö–ª–∏–µ–Ω—Ç': client_orders,
    '–ö–ª–∏–µ–Ω—Ç': cmd_client,
    '–ì–æ—Ä–æ–¥': cmd_type_pair,
    '–¢–ò–ü_–ü–∞—Ä—ã': user_type_pair,
    '–ü–∞—Ä–∞': cmd_pair,
    '–ü–µ—Ä–∏–æ–¥': cmd_transfer,
    '–î–æ—Å—Ç–∞–≤–∫–∞': cmd_accept_order,
    '–ó–∞—è–≤–∫–∞_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞': cmd_accepted_order,
    '–ó–∞—è–≤–∫–∞_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞': cmd_canceled_order,
    '–û—Ç–º–µ–Ω–∏—Ç—å_–∑–∞—è–≤–∫—É': user_canceled_order,
    '–í—ã–±–∏—Ä–∞—é_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ': cmd_accepted_merchant_executer,
    '–û–±–º–µ–Ω–Ω–∏–∫': cmd_merchant,
    '–ü—Ä–∞–≤–∏–ª–∞_—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã': merchant_terms_of_use_agreed,
    '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': merchant_settings,
    '–°–º–µ–Ω–∞_—Å—Ç–∞—Ç—É—Å–∞': merchant_change_status,
    '–ú–æ–∏_–≥–æ—Ä–æ–¥–∞': merchant_cities,
    '–î–æ—Å—Ç–∞–≤–∫–∞_–∫–µ—à': merchant_delivery,
    '–ú–æ–∏_–¥–æ–ª–≥–∏': merchant_debts,
    '–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞': change_merchat_city,
    '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã': merchant_orders_completed,
    '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ_–∑–∞—è–≤–∫–∏': actual_orders,
    '–ó–∞–∫–∞–∑—ã_–ú–µ—Ä—á–∞–Ω—Ç': merchant_orders,
    '–£–¥–∞–ª–∏—Ç—å': del_mes,
    '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å': merchant_suggestion,
    '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å_–∫—É—Ä—Å': merchant_suggestion_course,
    '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è': merchant_suggestion_cancel,
    '–ú–æ–∏_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è': merchant_suggestions,
    '–ö—É—Ä—Å_–≤–∞–ª—é—Ç': merchant_course,
    '–ó–±–∞—Ä–∞—Ç—å_–∑–∞—è–≤–∫—É': execute_order,
    'pass': cmd_pass,
    '–ö–ª–∏–µ–Ω—Ç_–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª_—Å–¥–µ–ª–∫—É': cmd_finnaly_accepted_order,
    '–ö–ª–∏–µ–Ω—Ç_–æ—Ç–º–µ–Ω–∏–ª_—Å–¥–µ–ª–∫—É': cmd_finnaly_rejected_order,
    'Help': cmd_help,
    '–û—Ç–≤–µ—Ç_–Ω–∞_–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä': answer_rejected_order,
    '–û—Ç–≤–µ—Ç_–Ω–∞_–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π_–æ—Ä–¥–µ—Ä': answer_accepted_order,
}


def secret_level(update: Update, context: CallbackContext) -> None:
    # callback_data: SECRET_LEVEL_BUTTON variable from manage_data.py
    """ Pressed 'secret_level_button_text' after /start command"""
    user_id = extract_user_data_from_update(update)['user_id']
    text = static_text.unlock_secret_room.format(
        user_count=User.objects.count(),
        active_24=User.objects.filter(
            updated_at__gte=timezone.now() - datetime.timedelta(hours=24)).count()
    )

    context.bot.edit_message_text(
        text=text,
        chat_id=user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )
